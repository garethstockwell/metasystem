[alias]
    # Print out all aliases, reformatted to condense whitespace
	alias = !git config --list | \
			grep 'alias\\.' | \
			sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\: \\2/' | \
			sed 's/  */ /g' | \
			sed 's/\t\t*/ /g' | \
			sort

	# Aliases adapted from sources including
	# http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/`
	# http://stackoverflow.com/questions/1862423/git-how-to-tell-which-commit-a-tag-points-to
	# https://github.com/vecio/.linux/blob/master/gitconfig

	# Stage all uncommitted changes, then print out a status message
	a = "!(git status --porcelain --ignore-submodules | \
				grep -E '^[ MARC][MD]' >/dev/null && \
			(echo 'Staging changes\n' ; git add .) || \
				echo 'No changes to stage\n') ; \
		 git status"

	# Stage all untracked files, then print out a status message
	au = "!(git status --porcelain --ignore-submodules | \
			grep -E '^\\?\\?' >/dev/null && \
			(echo 'Staging untracked files\n' ; git add -u) || \
				echo 'No untracked files to stage\n') ; \
		 git status"

	# Stage all uncommitted changes and untracked files, then print out a status message
	aa = !git add . && \
		 git add -u && \
		 git status

	b = branch

	# Show branch descriptions (bds = branch description show)
	# From https://gist.github.com/jeenuv/3145db36eb2a27ba022a
	bds = "!f() { \
			head=$(git symbolic-ref --short HEAD); \
			git for-each-ref refs/heads --format='%(refname:short)' | \
				while read br; do \
					desc=$(git config --get branch.$br.description | head -n1); \
					if [ \"$head\" = \"$br\" ]; then \
						printf '* %-30s%-10s %s\\n' \"$(tput setaf 2)$br$(tput setaf 9)\" \"\" \"$desc\"; \
					else \
						printf '  %-30s %s\\n' \"$br\" \"$desc\"; \
					fi; \
				done; \
		}; f"

	# Edit branch descriptions (bde = branch description edit)
	bde = branch --edit-description

	c = commit
	ca = commit --amend
	cm = commit -m

	co = checkout
	
	cp = cherry-pick

	d = diff
	ds = diff --staged

	# Find files whose name matches a pattern
	f = !git ls-files | grep -i
	find = !git ls-files | grep -i

	fp = format-patch

	# Search for strings in file contents
	gr = grep

	# Find from root of repo
	grt = "!f() { \
				A=$(pwd) && \
				TOPLEVEL=$(git rev-parse --show-toplevel) && \
				cd $TOPLEVEL && \
				git grep --full-name -In $1 | \
					xargs -I{} echo $TOPLEVEL/{} && \
				cd $A; \
			}; f"

	# Append a string to .gitignore
	ignore = !([ ! -e .gitignore ] && touch .gitignore) | \
			 echo $1 >>.gitignore

	l = log --graph \
			--pretty=format:'%C(yellow)%h %C(green)%cr%C(red)%d%C(reset) %s %C(bold blue)[%an]' \
			--abbrev-commit \
			--date=relative

	ll = log --graph \
			 --stat \
			 --abbrev-commit \
			 --decorate=full

	lp = log --graph \
			 --patch \
			 --abbrev-commit \
			 --decorate=full

	rc = rebase --continue

	remove = !git ls-files -z --deleted | \
			 xargs -0 git rm

	rv = remote --verbose

	s = status
	st = status

	sm = submodule
	smi = submodule init
	smir = submodule init --recursive
	smu = submodule update
	smuir = submodule update --init --recursive
	smur = submodule update --recursive

    # https://joernhees.de/blog/2012/04/24/git-ad-hoc-sharing/
    serve = !git daemon --reuseaddr --base-path=. --export-all --verbose --informative-errors
    hub = !git daemon --reuseaddr --base-path=. --export-all --verbose --informative-errors --enable=receive-pack

	# See which commit a tag points to
	tagcommit = !sh -c 'git rev-list $0 | head -n 1'

[branch]
	autosetuprebase = always

[color]
	branch = auto
	diff = auto
	status = auto
	ui = auto

[core]
	pager = "less -FRSX"
	whitespace = tab-in-indent

[format]
	pretty = fuller

[push]
	# Push the current branch to its upstream branch
	default = tracking

[remote "origin"]
	# Push only the current branch
	push = HEAD

[rerere]
	# Record and replay conflict resolutions automatically
	enabled = true
	autoupdate = true

[rebase]
	# Show a diffstat in 'git pull --rebase'
	stat = true

[status]
	relativePaths = false

[user]
	name = ${NAME}
	email = ${EMAIL}


#------------------------------------------------------------------------------
# Local
#------------------------------------------------------------------------------

[include]
	path = ${HOME}/.gitconfig-local

