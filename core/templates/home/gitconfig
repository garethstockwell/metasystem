[alias]
	alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\: \\2/' | sort

	# Aliases adapted from sources including
	# http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/`
	# http://stackoverflow.com/questions/1862423/git-how-to-tell-which-commit-a-tag-points-to
	# https://github.com/vecio/.linux/blob/master/gitconfig

	a = "!(git status --porcelain --ignore-submodules | grep -E '^[ MARC][MD]' >/dev/null \
			&& (echo 'Staging changes\n' ; git add .) \
			|| echo 'No changes to stage\n') ; \
         git status"

	au = "!(git status --porcelain --ignore-submodules | grep -E '^\\?\\?' >/dev/null \
			&& (echo 'Staging untracked files\n' ; git add -u) \
			|| echo 'No untracked files to stage\n') ; \
         git status"

	aa = !git add . && git add -u && git status

	amend = !git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend

	b = branch
	
	c = commit
	ca = commit --amend
	cm = commit -m

	co = checkout
	
	cp = cherry-pick

	d = diff
	ds = diff --staged

	f = !git ls-files | grep -i
	find = !git ls-files | grep -i

	fp = format-patch

	gr = grep -Ii
	grep = grep -Ii

	# Find from root of repo
	grt = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	ignore = !([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore

	l = log --graph --pretty=format:'%C(yellow)%h %C(green)%cr%C(red)%d%C(reset) %s %C(bold blue)[%an]' --abbrev-commit --date=relative
	ll = log --graph --stat --abbrev-commit --decorate=full
	lp = log --graph --patch --abbrev-commit --decorate=full

	remove = !git ls-files -z --deleted | xargs -0 git rm

	rv = remote --verbose

	s = status
	st = status

	# See which commit a tag points to
	tagcommit = !sh -c 'git rev-list $0 | head -n 1'

[branch]
	autosetuprebase = always

[color]
	branch = auto
	diff = auto
	status = auto
	ui = auto

[core]
	pager = "less -FRSX"
	whitespace = tab-in-indent

[format]
	pretty = fuller

[push]
	# Push the current branch to its upstream branch
	default = tracking

[remote "origin"]
	# Push only the current branch
	push = HEAD

[rerere]
	# Record and replay conflict resolutions automatically
	enabled = true
	autoupdate = true

[rebase]
	# Show a diffstat in 'git pull --rebase'
	stat = true

[status]
	relativePaths = false

[user]
	name = ${NAME}
	email = ${EMAIL}


#------------------------------------------------------------------------------
# Local
#------------------------------------------------------------------------------

[include]
	path = ${HOME}/.gitconfig-local

