# android-plat-enter

autostash PATH

if [[ -d __PATH__/android ]]; then
	autostash ANDROID_SRC=__PATH__/android
else
	autostash ANDROID_SRC=__PATH__
fi

autostash TOP=$ANDROID_SRC

if [[ -e $ANDROID_SRC/build/envsetup.sh ]]; then
	echo -e "\n${NAKED_LIGHT_GREEN}Sourcing build/envsetup.sh${NAKED_NO_COLOR}"
	# envsetup.sh assumes that PWD == ANDROID_BUILD_TOP
	metasystem_stash_cd $ANDROID_SRC
	source build/envsetup.sh
	metasystem_unstash_cd

	# Prevent envsetup.sh's settitle stomping on our pretty prompt
	autostash STAY_OFF_MY_LAWN=1

	autostash ANDROID_DATA=__PATH__/data

	# Ensure that SDK tools are not in path
	export PATH=$(path_remove $ANDROID_SDK_DIR/tools $PATH)
	export PATH=$(path_remove $ANDROID_SDK_DIR/platform-tools $PATH)

	# Used by android_emulator()
	autostash ANDROID_SDCARD_IMG=$ANDROID_DATA/sdcard.img

	# make
	if [[ -z $METASYSTEM_MAKE_VANILLA ]]; then
		autostash METASYSTEM_MAKE_PARALLEL=1
		autostash METASYSTEM_MAKE_SCHED=
		autostash METASYSTEM_MAKE_LOG=1
		autostash METASYSTEM_MAKE_TIME=1
		autostash MAKE_LOG_DIR=$ANDROID_DATA/logs/make
		mkdir -p $MAKE_LOG_DIR
		echo -e "\n${NAKED_LIGHT_GREEN}make setup${NAKED_NO_COLOR}"
		echo "Parallel ................... $METASYSTEM_MAKE_PARALLEL"
		[[ $METASYSTEM_OS == linux ]] &&\
			echo "Schedule boost ............. $METASYSTEM_MAKE_SCHED"
	fi

	# Variables modified by envsetup.sh
	autostash LUNCH_MENU_CHOICES
	autostash VARIANT_CHOICES

	# Variables modified by lunch
	autostash TARGET_PRODUCT
	autostash TARGET_BUILD_VARIANT
	autostash TARGET_BUILD_TYPE
	autostash TARGET_BUILD_APPS

	# Host GCC
	if [[ -n $ANDROID_HOST_GCC_VERSION ]]; then
		echo -e "\n${NAKED_LIGHT_GREEN}Setting CC,CXX to point to GCC ${ANDROID_HOST_GCC_VERSION}${NAKED_NO_COLOR}"
		autostash CC=gcc-${ANDROID_HOST_GCC_VERSION}
		autostash CXX=g++-${ANDROID_HOST_GCC_VERSION}
	fi

	# Detect arch
	prebuilt_arch_32=
	prebuilt_arch_64=
	prebuilt_arch=
	case $METASYSTEM_OS in
		linux)
			prebuilt_arch_32=linux-x86
			prebuilt_arch_64=linux-x86_64
			# Detect 32/64 bit
			prebuilt_arch=linux-$(uname -m)
			;;
		mac)
			prebuilt_arch_32=darwin-x86
			prebuilt_arch_64=darwin-x86_64
			# Assume all Macs are 64-bit
			prebuilt_arch=$prebuilt_arch_64
			;;
		windows)
			prebuilt_arch_32=windows
			prebuilt_arch_64=windows-x86_64
			# Assume all Windows is 64-bit
			prebuilt_arch=$prebuilt_arch_64
			;;
	esac

	# ccache
	if [[ $USE_CCACHE == 1 ]]; then
		autostash CCACHE_DIR=$HOME/work/local/build/ccache
		echo -e "\n${NAKED_LIGHT_GREEN}Enabling ccache${NAKED_NO_COLOR}"
		echo "CCACHE_DIR = $CCACHE_DIR"
		# ccache is only built for 32-bit
		if [[ -n $prebuilt_arch_32 ]]; then
			export PATH=$(path_prepend $ANDROID_SRC/prebuilt/$prebuilt_arch_32/ccache $PATH)
			ccache -M 50G
		fi
	fi

	# SWT
	[[ -n $prebuilt_arch ]] &&\
		autostash ANDROID_SWT=$ANDROID_SRC/prebuilt/$prebuilt_arch/swt

	# Clean up
	unset prebuilt_arch_32
	unset prebuilt_arch_64
	unset prebuilt_arch

	# Add buildscripts to PATH
	if [[ -d $ANDROID_SRC/buildscripts ]]; then
		echo -e "\n${NAKED_LIGHT_GREEN}Adding buildscripts to PATH${NAKED_NO_COLOR}"
		export PATH=$(path_prepend $ANDROID_SRC/buildscripts $PATH)
	fi

	# Define file in which to persist the lunch menu selection
	autostash LUNCH_CONFIG=__PATH__/.lunch

	# Wrap lunch function
	# Relies on rename_function, defined in $METASYSTEM_LIB/bash/func.sh
	rename_function lunch android_lunch
	function lunch()
	{
		# android_lunch() assumes that PWD == ANDROID_BUILD_TOP
		metasystem_stash_cd $ANDROID_SRC
		stash -f METASYSTEM_MAKE_SILENT=1
		stash -f METASYSTEM_MAKE_FAST=
		stash -f METASYSTEM_MAKE_LOG=
		stash -f METASYSTEM_MAKE_TIME=
		android_lunch "$@"
		unstash METASYSTEM_MAKE_TIME
		unstash METASYSTEM_MAKE_LOG
		unstash METASYSTEM_MAKE_FAST
		unstash METASYSTEM_MAKE_SILENT
		metasystem_unstash_cd
		rm -f $LUNCH_CONFIG
		echo ${TARGET_PRODUCT}-${TARGET_BUILD_VARIANT} > $LUNCH_CONFIG
	}

	# Read in .lunch file if it exists
	if [[ -n $ANDROID_AUTO_LUNCH ]]; then
		if [[ -e $LUNCH_CONFIG ]]; then
				echo -en "\n${NAKED_LIGHT_GREEN}Applying lunch selection $(cat $LUNCH_CONFIG) ...${NAKED_NO_COLOR}"
				lunch $(cat $LUNCH_CONFIG)
		else
			echo -e "\n.lunch not found\n"
		fi
	else
		echo
	fi

	# Kernel compilation variables
	if [[ -n $ANDROID_SET_KERNEL_COMPILATION_VARS ]]; then
		echo -e "${NAKED_LIGHT_GREEN}Setting kernel compilation environment variables${NAKED_NO_COLOR}"
		autostash ARCH=arm
		autostash SUBARCH=arm
		autostash CROSS_COMPILE=arm-eabi-
		echo "ARCH ....................... $ARCH"
		echo "SUBARCH .................... $SUBARCH"
		echo "CROSS_COMPILE .............. $CROSS_COMPILE"
		autostash ANDROID_CROSS_COMPILER_VERSION=$(arm-eabi-gcc --version 2>/dev/null | head -n1 | awk '{print $3}')
		echo "Cross compiler version ..... $ANDROID_CROSS_COMPILER_VERSION"
	fi

	echo

	# Alias to function exported from bashrc
	alias emulator=metasystem_android_emulator
else
	echo -e "\n${NAKED_LIGHT_GREEN}build/envsetup.sh not found${NAKED_NO_COLOR}"
fi

